name: Compile and Release Qt6 Windows Project

on:
  push:
    tags:
      - "v*.*.*"

env:
  QT_VERSION:     "6.4.3"
  MINGW_VERSION:  "win64_mingw"
  # MINGW_PATH:     "mingw1120_64"
  MINGW_PATH:     "mingw_64"
  BUILD_TYPE:      Release

jobs:
  build:
    runs-on: windows-latest
    steps:
    -
      uses: actions/checkout@v3
    -
      name: Check mingw g++ version
      run: |
        Write-Output (Get-Command g++.exe).Path
        g++.exe --version
    # -
    #   name: Install correct version of mingw
    #   uses: crazy-max/ghaction-chocolatey@v1
    #   with:
    #     args: install mingw --version=11.2.0  -y --allow-downgrade
    -
      name: Check mingw directory
      run: |
        ls C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin
    -
      name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        host: windows
        target: "desktop"
        version: ${{ env.QT_VERSION }}
        arch: ${{ env.MINGW_VERSION }}
        dir: "${{github.workspace}}/qt"
        install-deps: "true"
    # -
    #   name: Set Qt path and refresh
    #   run: |
    #     echo "${{github.workspace}}/qt/Qt/${{ env.QT_VERSION }}/${{ env.MINGW_PATH }}/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    #     refreshenv
    #     #Write-Output (Get-Command g++.exe).Path
    #     #g++.exe --version
    # -
    #   name: Check availability of libraries
    #   run: |
    #     ls ${{github.workspace}}/qt/Qt/${{ env.QT_VERSION }}/${{ env.MINGW_PATH }}/lib/
    # -
    #   name: Check availability of binaries
    #   run: |
    #     ls ${{github.workspace}}/qt/Qt/${{ env.QT_VERSION }}/${{ env.MINGW_PATH }}/bin/
    # -
    #   name: Prepend path
    #   run: echo ":${{github.workspace}}/qt/Qt/${{ env.QT_VERSION }}/mingw73_32/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    # -
    #   name: Check QMake, CMake and make
    #   run: |
    #     Write-Output (Get-Command qmake.exe).Path
    #     qmake.exe -version
    #     Write-Output (Get-Command cmake.exe).Path
    #     cmake.exe -version
    #     Write-Output (Get-Command mingw32-make.exe).Path
    #     mingw32-make.exe -version  
    -
      name: Configure CMake Project
      working-directory: ${{github.workspace}}/Popup-Adventure
      env:
        CMAKE_PREFIX_PATH: ${{env.Qt5_Dir}}
      run: cmake -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -G "CodeBlocks - MinGW Makefiles" -B ${{github.workspace}}/build
    -
      name: Build project
      working-directory: ${{github.workspace}}/build
      run: |
        mingw32-make.exe
    -
      name: Compress portable program
      run: |
        mkdir ${{github.workspace}}\build\Popup-Adventure\
        cp ${{github.workspace}}/build/Popup-Adventure.exe ${{github.workspace}}\build\Popup-Adventure\
        cp ${{github.workspace}}/build/*.dll ${{github.workspace}}\build\Popup-Adventure\
        cp ${{github.workspace}}/build/Stories ${{github.workspace}}\build\Popup-Adventure\Stories\
        cp ${{github.workspace}}/build/platforms ${{github.workspace}}\build\Popup-Adventure\platforms\
        cp ${{github.workspace}}/README.md ${{github.workspace}}\build\Popup-Adventure\
        cp ${{github.workspace}}/story_template.json ${{github.workspace}}\build\Popup-Adventure\
        cd ${{github.workspace}}\build\Popup-Adventure\
        windeployqt.exe Popup-Adventure.exe
        echo "Finished windeployqt"
        ls
        Compress-Archive -Path ${{github.workspace}}\build\Popup-Adventure\ -DestinationPath ${{github.workspace}}\PopupAdventureWindows.zip
    -
      name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: PopupAdventureWindows.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}